package hardysTaxi;

import java.util.Iterator;
import java.util.TreeSet;

/**
 * Provides the static method hardySolutionsLessThan(N) which finds all "taxicab
 * numbers that are less than n. These are represented as TaxicabNumber objects,
 * which include the sum and two different ways of writing that as a sum of two
 * cubes.
 * 
 * @author Claude Anderson.
 * 
 */
public class Hardy {
	// google's EfficientHashSet
	private static EfficientHashSet<Long> possibles = new EfficientHashSet<>();
	// TreeSet to order the hardyNumbers in increasing order
	private static TreeSet<Long> hardyNum = new TreeSet<>();

	// TODO: Declare any variables or helper methods that you need.

	/**
	 * Find the nth Hardy number (start counting with 1, not 0) and the numbers
	 * whose cubes demonstrate that it is a Hardy number.
	 * 
	 * @param n
	 * @return the nth Hardy number
	 */
	public static long nthHardyNumber(int n) {
		possibles = new EfficientHashSet<>();
		hardyNum = new TreeSet<>();

		// our values that are squared
		long a = 1;
		long b = 1;
		// the number of hardy numbers to store
		double numsLeft = 1.05 * n;
		
		while (numsLeft > 0) {
			for (b = 1; b <= a; b++) {
				long possibleNum = (a * a * a) + (b * b * b);
				
				// possibleNum is a hardy number if it is already in possibles
				if (possibles.contains(possibleNum)) {
					hardyNum.add(possibleNum);
					numsLeft--;
				} else {
					possibles.add(possibleNum);	
				}
				
				if(numsLeft <= 0) {
					break;
				}
				
			}
			a++;
		}
		// iterate to get the correct nth Hardy number
		Iterator<Long> iter = hardyNum.iterator();
		long nHardy = 0;
		for(int i = 0 ; i < n; i ++){
			nHardy = iter.next();
		}
		
		
		return nHardy;
	}

}
