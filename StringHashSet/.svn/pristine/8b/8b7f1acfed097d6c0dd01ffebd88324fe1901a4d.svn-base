import java.util.Collection;
import java.util.Iterator;

/**
 * 
 * A hash set implementation for Strings. Cannot insert null into the set. Other
 * requirements are given with each method.
 *
 * @author Matt Boutell and <<TODO: your name here >>>. Created Oct 6, 2014.
 */
public class StringHashSet {

	// The initial size of the internal array.
	private static final int DEFAULT_CAPACITY = 5;
	private final Node NULL_NODE = new Node();
	private Node[] stringSet;

	// You'll want fields for the size (number of elements) and the internal
	// array of Nodes. I also added one for the capacity (the length
	// of the internal array).
	private int size;
	private int capaicty;
	private int numberOfNodes;

	private class Node {
		// TODO: Implement this class . These are just linked-list style
		// nodes, so you will need at least fields for the data and a reference
		// to the next node, plus a constructor. You can choose to use a
		// NULL_NODE at the end, or not. I chose not to do so this time.
		private String data; 
		private Node parent;
		private Node child;
		
		public Node() {
			this.data = "";
			this.child = null;
			this.parent = null;
		}
		
		public Node(String data, Node parent) {
			this.data = data;
			this.child = NULL_NODE;
			this.parent = parent;
		}
		
		public Node(String data, Node parent, Node child) {
			this.data = data;
			this.parent = parent;
			this.child = child;
		}
	}

	/**
	 * Creates a Hash Set with the default capacity.
	 */
	public StringHashSet() {
		// Recall that using this as a method calls another constructor
		this(DEFAULT_CAPACITY);
	}

	/**
	 * Creates a Hash Set with the given capacity.
	 */
	public StringHashSet(int initialCapacity) {
		initialize(initialCapacity);
	}

	private void initialize(int initialCapacity) {
		// TODO: Set the capacity to the given capacity, and initialize the
		// other fields.
		// Why did we pull this out into a separate method? Perhaps another
		// method needs to initialize the hash set as well? (Hint)
		this.capaicty = initialCapacity;
		this.size = 0; // number of non empyt array slots
		this.numberOfNodes = 0; // numbe of actual Nodes, always >= size
		this.stringSet = new Node[this.capaicty];
	}

	/**
	 * Calculates the hash code for Strings, using the x=31*x + y pattern.
	 * Follow the specification in the String.hashCode() method in the Java API.
	 * Note that the hashcode can overflow the max integer, so it can be
	 * negative. Later, in another method, you'll need to account for a negative
	 * hashcode by adding Integer.MAX_VALUE before you mod by the capacity
	 * (table size) to get the index.
	 *
	 * This method is NOT the place to calculate the index though.
	 *
	 * @param item
	 * @return The hash code for this String
	 */
	public static int stringHashCode(String item) {
		return item.hashCode();
//		int code = 0;
//		int y = 0;
//		for(int i = 0; i < item.length(); i++ ) {
//			y = Character.getNumericValue(item.charAt(i));
//			code = 31*code + y;
//		}
//		return code;
	}

	/**
	 * Adds a new node if it is not there already. If there is a collision, then
	 * add a new node to the -front- of the linked list.
	 * 
	 * Must operate in amortized O(1) time, assuming a good hashcode function.
	 *
	 * If the number of nodes in the hash table would be over double the
	 * capacity (that is, lambda > 2) as a result of adding this item, then
	 * first double the capacity and then rehash all the current items into the
	 * double-size table.
	 *
	 * @param item
	 * @return true if the item was successfully added (that is, if that hash
	 *         table was modified as a result of this call), false otherwise.
	 */
	public boolean add(String item) {
		// resize the aray
		if(this.numberOfNodes >= 2 * this.capaicty){
			rehash();
		}
		int hashCode = stringHashCode(item);
		
		int index = hashCode % this.capaicty;
		
		// if hashCode is negative, due to being over the maxValue
		if(hashCode < 0 )
			index = (hashCode + Integer.MAX_VALUE) % this.capaicty;
		
		if(this.stringSet[index] == null) {
			this.stringSet[index] = new Node(item, NULL_NODE); // first node in this position
			this.size ++;
			this.numberOfNodes++;
		}else {
			if(contains(item)) { // item already in the set
				return false;
			}
			Node firstNode = this.stringSet[index];
			this.stringSet[index] = new Node(item, NULL_NODE, firstNode);
			this.numberOfNodes++;
//			// reassign children's parents
//			Node currentNode = firstNode; 
//			while(currentNode != NULL_NODE || currentNode.child != NULL_NODE) {
//				currentNode.child.parent = currentNode; // sets the child's parent to this Node
//			}
		}
		
		return true;
	}

	private void rehash() {
		Node[] oldSet = this.stringSet.clone(); // copy of the stringSet
		initialize(this.capaicty *2); // new set with double the capacity
		
		for(int i = 0; i < oldSet.length; i++) {
			if(oldSet[i] != null) { // Node in this position
				Node currentNode = oldSet[i];
				while(currentNode != NULL_NODE) {// add rehash the chain and add
					 add(currentNode.data);// add to the new set
					 currentNode = currentNode.child; // add the next child
				}
			}
		}
	}

	/**
	 * Prints an array value on each line. Each line will be an array index
	 * followed by a colon and a list of Node data values, ending in null. For
	 * example, inserting the strings in the testAddSmallCollisions example
	 * gives "0: shalom hola null 1 bonjour null 2 caio hello null 3 null 4 hi
	 * null". Use a StringBuilder, so you can build the string in O(n) time.
	 * (Repeatedly concatenating n strings onto a growing string gives O(n^2)
	 * time)
	 * 
	 * @return A slightly-formatted string, mostly used for debugging
	 */
	public String toRawString() {
		StringBuilder arrayString = new StringBuilder();
		StringBuilder indexString = new StringBuilder();
		for(int i = 0; i < this.stringSet.length; i ++) {
			indexString = new StringBuilder();
			indexString.append(String.valueOf(i) + ": ");
			if(this.stringSet[i] != null) {
				Node currentNode = this.stringSet[i];
				while(currentNode != NULL_NODE) {
					indexString.append(currentNode.data + " ");
					currentNode = currentNode.child;
				}

			}
			indexString.append("null\n");
			arrayString.append(indexString);
		}
		return arrayString.toString();
	}

	/**
	 * 
	 * Checks if the given item is in the hash table.
	 * 
	 * Must operate in O(1) time, assuming a good hashcode function.
	 *
	 * @param item
	 * @return True if and only if the item is in the hash table.
	 */
	public boolean contains(String item) {
		int hashCode = stringHashCode(item);
		
		int index = hashCode % this.capaicty;
		
		// if hashCode is negative, due to being over the maxValue
		if(hashCode < 0 )
			index = (hashCode + Integer.MAX_VALUE) % this.capaicty;
		
		if(this.stringSet[index] == null) { // if no chain there
			return false;
		}
		Node currentNode = this.stringSet[index];
		while(currentNode != NULL_NODE) {
			if(currentNode.data == item) {
				return true;
			}
			currentNode = currentNode.child;
		}
		// else: not in the chain
		return false;
	}

	/**
	 * Returns the number of items added to the hash table. Must operate in O(1)
	 * time.
	 *
	 * @return The number of items in the hash table.
	 */
	public int size() {
		return this.numberOfNodes;
	}

	/**
	 * @return True iff the hash table contains no items.
	 */
	public boolean isEmpty() {
		return this.numberOfNodes == 0;
	}

	/**
	 * Removes all the items from the hash table. Resets the capacity to the
	 * DEFAULT_CAPACITY
	 */
	public void clear() {
		initialize(this.DEFAULT_CAPACITY);
	}

	/**
	 * Removes the given item from the hash table if it is there. You do NOT
	 * need to resize down if the load factor decreases below the threshold.
	 * 
	 * @param item
	 * @return True If the item was in the hash table (or equivalently, if the
	 *         table changed as a result).
	 */
	public boolean remove(String item) {
		if(!contains(item)) {
			return false;
		}
		for(int i = 0; i < this.stringSet.length; i++) {
			Node currentNode = this.stringSet[i];
			if(currentNode != null) {
				while(currentNode != NULL_NODE) {
					if(currentNode.data == item) {
						if(currentNode.child != NULL_NODE) {// has Nodes below it
							currentNode.data = currentNode.child.data;
							currentNode.child = currentNode.child.child;
							currentNode.parent.child = currentNode.child;
							currentNode.child.parent = currentNode.parent;
							this.numberOfNodes--;
							return true;
						}// else has no children
						if(currentNode.parent == NULL_NODE) { // top of chain
							this.stringSet[i] = null;
							this.numberOfNodes--;
							this.size--;
							return true;
						}
						currentNode.parent.child = NULL_NODE;
						this.numberOfNodes--;
						return true;
					}
					currentNode = currentNode.child;
				}
			}
		}
		// shouldn't reach here
		return false;
	}

	/**
	 * Adds all the items from the given collection to the hash table.
	 *
	 * @param collection
	 * @return True if the hash table is modified in any way.
	 */
	public boolean addAll(Collection<String> collection) {
		for(int i = 0; i < collection.size(); i++) {
			Iterator iter = collection.iterator();
			while(iter.hasNext()){
				add((String) iter.next());
			}
		}
		return true;
	}

	/**
	 * 
	 * Challenge Feature: Returns an iterator over the set. Return the items in
	 * any order that you can do efficiently. Should throw a
	 * NoSuchElementException if there are no more items and next(0 is called.
	 * Should throw a ConcurrentModificationException if next() is called and
	 * the set has been mutated since the iterator was created.
	 *
	 * @return an iterator.
	 */
	public Iterator<String> iterator() {
		return null;
	}

	// Challenge Feature: If you have an iterator, this is easy. Use a
	// StringBuilder, so you can build the string in O(n) time. (Repeatedly
	// concatenating n strings onto a string gives O(n^2) time)
	// Format it like any other Collection's toString (like [a,b,c])
	@Override
	public String toString() {
		return null;
	}
}
