package editortrees;

import java.util.Stack;

import debughelp.DisplayableBinaryTree;
import editortrees.Node.Code;

// A height-balanced binary tree with rank that could be the basis for a text editor.

public class EditTree {

	private Node root;
	private int rotationCount = 0;
	public static Node NULL_NODE = new Node();
	public Node root_parent = new Node(); // dummy node that is parent to										// root
	private DisplayableBinaryTree display;

	/**
	 * Construct an empty tree
	 */
	public EditTree() {
		this.root = NULL_NODE;
		this.root_parent.left = this.root;
		this.root_parent.right = NULL_NODE;
		this.root_parent.rank = -1;
	}

	/**
	 * Construct a single-node tree whose element is c
	 * 
	 * @param c
	 */
	public EditTree(char c) {
		this.root = new Node(c, this.root_parent);
		this.root_parent.left = this.root;
		this.root_parent.right = NULL_NODE;
		this.root_parent.rank = -1;
	}

	/**
	 * Create an EditTree whose toString is s. This can be done in O(N) time,
	 * where N is the length of the tree (repeatedly calling insert() would be
	 * O(N log N), so you need to find a more efficient way to do this.
	 * 
	 * @param s
	 */
	public EditTree(String s) {
		this.root = new Node();
		this.root.parent = this.root_parent;
		this.root_parent.left = this.root;
		int length = s.length();
		if (length == 0) {
			return;
		}

		int middle = (length / 2);
		char rootchar = s.charAt(middle);
		this.root.element = rootchar;
		//TODO: ask about this
		this.root_parent.left = this.root;// why must we reassign root parents left when roots element is changed??
		if (length <= 1) {// already created to one node, which is the root
			return;
		}
		// else build rest of the tree
		this.root.constructFromString(s.substring(0, middle),
				s.substring(middle + 1));
		this.root.calculateAllBalance();
	}

	/**
	 * Make this tree be a copy of e, with all new nodes, but the same shape and
	 * contents.
	 * 
	 * @param e
	 */
	public EditTree(EditTree e) {
		this.root = NULL_NODE;
		if (e.root != NULL_NODE) {
			this.root = this.root.clone(e.root, NULL_NODE);
		}
		this.root.parent = this.root_parent;
		this.root_parent.left = this.root;
	}

	/**
	 * 
	 * @return the height of this tree
	 */
	public int height() {
		return this.root.height(); // replace by a real calculation.
	}

	/**
	 * 
	 * returns the total number of rotations done in this tree since it was
	 * created. A double rotation counts as two.
	 *
	 * @return number of rotations since tree was created.
	 */
	public int totalRotationCount() {
		return this.rotationCount;
	}

	/**
	 * return the string produced by an inorder traversal of this tree
	 */
	@Override
	public String toString() {
		if (this.root.equals(NULL_NODE)) {
			return "";
		}
		StringBuilder sb = new StringBuilder();
		sb.append(this.root.toString());
		return sb.toString();

	}

	/**
	 * This one asks for more info from each node. You can write it like the
	 * arraylist-based toString() method from the BST assignment. However, the
	 * output isn't just the elements, but the elements, ranks, and balance
	 * codes. Former CSSE230 students recommended that this method, while making
	 * it harder to pass tests initially, saves them time later since it catches
	 * weird errors that occur when you don't update ranks and balance codes
	 * correctly. For the tree with node b and children a and c, it should
	 * return the string: [b1=, a0=, c0=] There are many more examples in the
	 * unit tests.
	 * 
	 * @return The string of elements, ranks, and balance codes, given in a
	 *         pre-order traversal of the tree.
	 */
	public String toDebugString() {
		if (this.root.equals(NULL_NODE)) {
			return "[]";
		}
		StringBuilder sb = new StringBuilder();
		sb.append('[');
		sb.append(this.root.toDebugString());
		sb.delete(sb.length() - 2, sb.length());
		sb.append(']');
		return sb.toString();
	}

	/**
	 * gets the element in the specified position
	 * 
	 * @param pos
	 *            position in the tree
	 * @return the character at that position
	 * @throws IndexOutOfBoundsException
	 */
	public char get(int pos) throws IndexOutOfBoundsException {
		// exception cases
		if (pos >= this.size() || pos < 0) {
			throw new IndexOutOfBoundsException();
		}
		return this.root.get(pos);
	}

	/**
	 * 
	 * @param c
	 *            character to add to the end of this tree.
	 */
	public void add(char c) {
		// Notes:
		// 1. Please document chunks of code as you go. Why are you doing what
		// you are doing? Comments written after the code is finalized tend to
		// be useless, since they just say WHAT the code does, line by line,
		// rather than WHY the code was written like that. Six months from now,
		// it's the reasoning behind doing what you did that will be valuable to
		// you!
		// 2. Unit tests are cumulative, and many things are based on add(), so
		// make sure that you get this one correct.

		// If the tree is empty
		if (this.root.equals(NULL_NODE)) {
			this.root = new Node(c, this.root_parent);
			this.root_parent.left = this.root;
		} else {
			this.rotationCount += this.root.add(c);
			this.root = this.root_parent.left;
		}
	}

	/**
	 * 
	 * @param c
	 *            character to add
	 * @param pos
	 *            character added in this inorder position
	 * @throws IndexOutOfBoundsException
	 *             id pos is negative or too large for this tree
	 */
	public void add(char c, int pos) throws IndexOutOfBoundsException {
		// checks if pos is in the index
		if (this.root == NULL_NODE && pos >= 1) {
			throw new IndexOutOfBoundsException();
		}else if (pos > this.size()) {
			throw new IndexOutOfBoundsException();
		}
		if(pos < 0) {
			throw new IndexOutOfBoundsException();
		}
		// if tree is empty
		if (this.root.equals(NULL_NODE)) {
			this.root = new Node(c, this.root_parent);
			this.root_parent.left = this.root;
		} else {
			this.rotationCount += this.root.insert(c, pos);
			this.root = this.root_parent.left;
		}

	}

	/**
	 * 
	 * @return the number of nodes in this tree
	 */
	public int size() {
		return this.root.size();
	}

	/**
	 * 
	 * @param pos
	 *            position of character to delete from this tree
	 * @return the character that is deleted
	 * @throws IndexOutOfBoundsException
	 */
	public char delete(int pos) throws IndexOutOfBoundsException {
		// Implementation requirement:
		// When deleting a node with two children, you normally replace the
		// node to be deleted with either its in-order successor or predecessor.
		// The tests assume assume that you will replace it with the
		// *successor*.
		if (this.root == NULL_NODE) {
			throw new IndexOutOfBoundsException();
		}
		if (pos >= this.size() || pos < 0) {
			throw new IndexOutOfBoundsException();
		}

		if (pos == this.root.rank) {
			// special cases when deleteing at the root
			// delete with no children
			if (this.root.right == NULL_NODE && this.root.left == NULL_NODE) {
				char element = this.root.element;
				this.root = NULL_NODE;
				return element;
			} else if (this.root.right == NULL_NODE) {// delete with only left
														// child
				char element = this.root.element;
				this.root = this.root.left;
				this.root.parent = null;
				return element;
			} else if (this.root.left == NULL_NODE) {// delete with only right
														// child
				char element = this.root.element;
				this.root = this.root.right;
				this.root.parent = null;
				return element;
			}
		}

		// if tree is not empty
		char[] deletedData = this.root.delete(pos, this.root.balance);
		this.root = this.root_parent.left;
		this.rotationCount += deletedData[1];
		return deletedData[0];
	}

	/**
	 * This method operates in O(length*log N), where N is the size of this
	 * tree.
	 * 
	 * @param pos
	 *            location of the beginning of the string to retrieve
	 * @param length
	 *            length of the string to retrieve
	 * @return string of length that starts in position pos
	 * @throws IndexOutOfBoundsException
	 *             unless both pos and pos+length-1 are legitimate indexes
	 *             within this tree.
	 */
	public String get(int pos, int length) throws IndexOutOfBoundsException {
		if (pos >= this.size() || pos < 0 || pos + length - 1 >= this.size()) {
			throw new IndexOutOfBoundsException();
		}
		return this.root.get(pos, length);

	}

	/**
	 * This method is provided for you, and should not need to be changed. If
	 * split() and concatenate() are O(log N) operations as required, delete
	 * should also be O(log N)
	 * 
	 * @param start
	 *            position of beginning of string to delete
	 * 
	 * @param length
	 *            length of string to delete
	 * @return an EditTree containing the deleted string
	 * @throws IndexOutOfBoundsException
	 *             unless both start and start+length-1 are in range for this
	 *             tree.
	 */
	public EditTree delete(int start, int length)
			throws IndexOutOfBoundsException {
		if (start < 0 || start + length >= this.size())
			throw new IndexOutOfBoundsException(
					(start < 0) ? "negative first argument to delete"
							: "delete range extends past end of string");
		EditTree t2 = this.split(start);
		EditTree t3 = t2.split(length);
		this.concatenate(t3);
		return t2;
	}

	/**
	 * Append (in time proportional to the log of the size of the larger tree)
	 * the contents of the other tree to this one. Other should be made empty
	 * after this operation.
	 * 
	 * @param other
	 * @throws IllegalArgumentException
	 *             if this == other
	 */
	public void concatenate(EditTree other) throws IllegalArgumentException {
		if (this.equals(other)) {
			throw new IllegalArgumentException();
		}
		if (!other.root.equals(NULL_NODE)) {
			if (this.height() >= other.height()) {
				// add other tree to this
				// get left most in other tree
				char qChar = other.delete(0);
				// go down the right side of the tree till same height is found
				int height1 = this.root.height();
				int height2 = other.root.height();
				Stack<Node> path = new Stack<Node>();
				// find point to insert into
				path = this.root.concatenate(height1, height2, path);
				Node p = path.pop();
				Node newNode = new Node(qChar, p.parent);
				if (p.parent.rank == -1) {
					p.parent.left = newNode;
				} else {
					p.parent.right = newNode;
				}
				newNode.left = p;
				p.parent = newNode;
				newNode.right = other.root;
				other.root.parent = newNode;
				newNode.rank = newNode.left.size();
				if (p.height() > other.root.height()) {
					newNode.balance = Code.LEFT;
				} else {
					newNode.balance = Code.SAME;
				}
				while (!path.isEmpty()) {
					Node temp = path.pop();
					temp.changeBalance(true);
				}
				this.root = this.root_parent.left;
				// insert rightmost at that point
				// left child is node being replaced right child is root of
				// smaller
				// tree
				other.root = EditTree.NULL_NODE;
				other.root_parent.left = other.root;
			} else {
				// add tree to other
				char qChar;
				if (this.size() > 0) {
					qChar = this.delete(this.size() - 1);
				} else {
					// else top will be left most in non empty tree
					qChar = other.delete(0);
				}
				// char qChar = this.delete(this.size() -1 );
				int height1 = this.height();
				int height2 = other.height();
				Stack<Node> path = new Stack<Node>();
				path = other.root.reverseConcatenate(height1, height2, path);
				Node p = path.pop();
				Node newNode = new Node(qChar, p.parent);
				p.parent.left = newNode;
				newNode.right = p;
				p.parent = newNode;
				newNode.left = this.root;
				this.root.parent = newNode;
				newNode.rank = newNode.left.size();
				if (p.height() > this.root.height()) {
					newNode.balance = Code.RIGHT;
				} else {
					newNode.balance = Code.SAME;
				}
				while (!path.isEmpty()) {
					Node temp = path.pop();
					temp.changeBalance(true);
				}
				this.root = other.root_parent.left;
				this.root_parent.left = this.root;
				this.root.parent = this.root_parent;
				// insert rightmost at that point
				// left child is node being replaced right child is root of
				// smaller
				// tree
				other.root = EditTree.NULL_NODE;
				other.root_parent.left = other.root;
			}
		}
	}

	/**
	 * This operation must be done in time proportional to the height of this
	 * tree.
	 * 
	 * @param pos
	 *            where to split this tree
	 * @return a new tree containing all of the elements of this tree whose
	 *         positions are >= position. Their nodes are removed from this
	 *         tree.
	 * @throws IndexOutOfBoundsException
	 */
	public EditTree split(int pos) throws IndexOutOfBoundsException {
		if (pos > this.size()) {
			throw new IndexOutOfBoundsException();
		}

		Node curr = this.root.getNode(pos);
		EditTree newTree = new EditTree();
		EditTree oldTree = new EditTree();

		if (curr.right != null) {
			oldTree.root = curr.right;
			oldTree.root.parent = NULL_NODE;
		}

		if (curr.left != null) {
			newTree.root = curr.left;
			newTree.root.parent = NULL_NODE;
			newTree.root.size = curr.rank;
		}

		oldTree.add(curr.element, 0);

		curr.left = null;
		curr.right = null;

		while (curr.parent != NULL_NODE) {
			if (curr.parent.left.equals(curr)) {
				if (curr.parent.right != null) {
					curr.parent.right.add(curr.parent.element);
					EditTree temp = new EditTree();
					temp.root = curr.parent.right;
					temp.root.parent = NULL_NODE;
					oldTree.concatenate(temp);
					curr = curr.parent;
				} else {
					oldTree.add(curr.parent.element);
					curr.parent.left = null;
					if (curr.parent.parent != null) {
						curr = curr.parent.parent;
					} else {
						break;
					}
				}
			} else { // repeat of above for the other tree
				if (curr.parent.right.equals(curr)) {
					if (curr.parent.left != null) {
						curr.parent.left.add(curr.parent.element);
						EditTree temp = new EditTree();
						temp.root = curr.parent.left;
						temp.root.parent = null;
						newTree.concatenate(temp);
						newTree = temp;
						curr = curr.parent;
					} else {
						newTree.add(curr.parent.element);
						curr.parent.right = null;
						if (!curr.parent.parent.equals(NULL_NODE)) {
							curr = curr.parent.parent;
						} else {
							break;
						}
					}
				}
			}
		}
		if (pos <= curr.rank) {
			if (oldTree.root.element != curr.element) {
				oldTree.add(curr.element);
			}
		} else {
			if (newTree.root.element != curr.element) {
				newTree.add(curr.element);
			}
		}

		this.root = oldTree.root;
		this.root.size = oldTree.size();

		return newTree;

	}

	/**
	 * Don't worry if you can't do this one efficiently.
	 * 
	 * @param s
	 *            the string to look for
	 * @return the position in this tree of the first occurrence of s; -1 if s
	 *         does not occur
	 */
	public int find(String s) {
		// if(this.root.equals(NULL_NODE)){
		// return -1;
		// }
		return this.root.toString().indexOf(s);
	}

	/**
	 * 
	 * @param s
	 *            the string to search for
	 * @param pos
	 *            the position in the tree to begin the search
	 * @return the position in this tree of the first occurrence of s that does
	 *         not occur before position pos; -1 if s does not occur
	 */
	public int find(String s, int pos) {
		return this.root.toString().indexOf(s, pos);
	}

	/**
	 * @return The root of this tree.
	 */
	public Node getRoot() {
		return this.root;
	}

	public int slowHeight() {
		return this.root.slowHeight();
	}

	public int slowSize() {
		return this.root.slowSize();
	}

	public void show() {
		if (this.display == null) {
			this.display = new DisplayableBinaryTree(this, 1080, 960, true);
		} else {
			this.display.show(true);
		}
	}

}
