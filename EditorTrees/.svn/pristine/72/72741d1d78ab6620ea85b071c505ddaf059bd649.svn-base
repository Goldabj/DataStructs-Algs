package editortrees;

// A node in a height-balanced binary tree with rank.
// Except for the NULL_NODE (if you choose to use one), one node cannot
// belong to two different trees.

public class Node {
	
	//Node NULL_NODE = new Node();
	
	public class RotationData {
		public int numOfRotations;
		public Node latestNode;
		
		public RotationData(int rotations, Node node){
			numOfRotations= rotations;
			latestNode = node;
		}
	}
	
	enum Code {
		SAME, LEFT, RIGHT;
		// Used in the displayer and debug string
		public String toString() {
			switch (this) {
				case LEFT:
					return "/";
				case SAME:
					return "=";
				case RIGHT:
					return "\\";
				default:
					throw new IllegalStateException();
			}
		}
	}
	
	// The fields would normally be private, but for the purposes of this class, 
	// we want to be able to test the results of the algorithms in addition to the
	// "publicly visible" effects
	
	char element;            
	Node left, right; // subtrees
	int rank = 0;         // inorder position of this node within its own subtree.
	Code balance = Code.SAME;
	int size = 0;
	// Node parent;  // You may want this field.
	// Feel free to add other fields that you find useful

	// You will probably want to add several other methods
	
	//NULL_NODE constructur
	public Node(){
		this.left = null;
		this.right = null;
	}
	
	public Node(char element){
		this.left = EditTree.NULL_NODE;
		this.right = EditTree.NULL_NODE;
		this.element = element;
	}

	// For the following methods, you should fill in the details so that they work correctly
	
	public int height() {
		if(this.equals(EditTree.NULL_NODE)){
			return -1;
		}
		int leftHeight = this.left.height();
		int rightHeight = this.right.height();
		if(leftHeight>=rightHeight){
			return leftHeight+1;
		}
		return rightHeight+1;
	}

	public int size() {
		if(this.equals(EditTree.NULL_NODE)){
			return 0;
		}		
		return 1+this.left.size()+this.right.size();
	}
	
	public RotationData add(char element) {
		int rotations=0;
		if(this.right.equals(EditTree.NULL_NODE)){
			 this.right = new Node(element);
			 rotations = this.checkBalance(true).numOfRotations;
		}else{
			RotationData temp = this.right.add(element);
			this.right = temp.latestNode;
			if(this.right.balance!=Code.SAME){
				rotations = this.checkBalance(true).numOfRotations;
			}
			else{
				rotations = temp.numOfRotations;
			}
		}
		return new RotationData(rotations, this);
	}
	/**
	 * 
	 * Checks the balance of the node by using what side the node was added on
	 * 
	 * @param addedRight
	 * 
	 */
	public RotationData checkBalance(boolean addedRight) {
		int numOfRotations=0;
		if(addedRight){
			switch(this.balance){
			case RIGHT:
				//need to rotate
				numOfRotations = rotate(this.balance,this.right.balance);
				break;
			case LEFT:
				this.balance = Code.SAME;
				break;
			case SAME:
				this.balance = Code.RIGHT;
				break;
			}
		}
		else{
			switch(this.balance){
			case RIGHT:
				this.balance = Code.SAME;
				break;
			case LEFT:
				//rotate
				numOfRotations = rotate(this.balance,this.left.balance);
				break;
			case SAME:
				this.balance = Code.LEFT;
				break;
			}
		}
		return new RotationData(numOfRotations,this);
		
	}

	private int rotate(Code parentBalance, Code childBalance) {
		int numOfRotations =0;
		if(parentBalance == Code.RIGHT){
			if(childBalance == Code.RIGHT){
				this.left = new Node(this.element);
				this.element = this.right.element;
				this.right = this.right.right;
				this.rank++;
				this.balance=Code.SAME;
				System.out.println("Single Left @ "+this.element+""+this.rank+""+this.balance);
				numOfRotations = 1;
			}
			else{
				System.out.println("Double Left @ :"+this.element+""+this.rank+""+this.balance);
				numOfRotations = 2;
				
			}
		}
		if(parentBalance == Code.LEFT){
			if(childBalance == Code.LEFT){
				this.right = new Node(this.element);
				this.element = this.left.element;
				this.left = this.left.left;
				this.balance=Code.SAME;
				System.out.println("Single Right @ :"+this.element+""+this.rank+""+this.balance);
				numOfRotations = 1;
			}
			System.out.println("Double Right @ :"+this.element+""+this.rank+""+this.balance);
			numOfRotations = 2;
		}
		return numOfRotations;
	}

	public String toDebugString() {
		if(this.equals(EditTree.NULL_NODE)){
			return "";
		}
		StringBuilder sb = new StringBuilder();
		sb.append(this.element+""+this.rank+""+this.balance.toString()+", ");
		sb.append(this.left.toDebugString());
		sb.append(this.right.toDebugString());
		return sb.toString();
	}
	
	public String toString(){
		if(this.equals(EditTree.NULL_NODE)){
			return "";
		}
		StringBuilder sb = new StringBuilder();
		sb.append(this.left.toString());
		sb.append(this.element+"");
		sb.append(this.right.toString());
		return sb.toString();
	}

	public char get(int pos) {
		if(this.rank==pos){
			return this.element;
		}
		if(this.rank<pos){
			return this.right.get(pos-(this.rank+1));
		}
		return this.left.get(pos);
	}


	public RotationData insert(char c, int pos) {
		int rotations = 0;
		if(this.rank>=pos){
			this.rank++;
			if(this.left.equals(EditTree.NULL_NODE)){
				this.left = new Node(c);
				rotations = this.checkBalance(false).numOfRotations;
			}
			else{
				RotationData temp = this.left.insert(c, pos);
				//check if height changes
				this.left = temp.latestNode;
				if(this.left.balance!=Code.SAME){
					this.checkBalance(false);
				}
			}
		}
		else{
			if(this.right.equals(EditTree.NULL_NODE)){
				this.right = new Node(c);
				rotations = this.checkBalance(true).numOfRotations;
			}
			else{
				RotationData temp = this.right.insert(c, pos-(this.rank+1));
				this.right = temp.latestNode;
				if(this.right.balance!=Code.SAME){
					this.checkBalance(true);
				}
			}
		}
		return new RotationData(rotations, this);
	}

}