import java.util.ArrayList;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.NoSuchElementException;
import java.util.Queue;
import java.util.Stack;

/**
 * 
 * Implementation of most of the Set interface operations using a Binary Search
 * Tree
 *
 * @author Matt Boutell and Brendan Goldacker.
 * @param <T>
 */

public class BinarySearchTree<T> implements Iterable<T> {
	private BinaryNode root;

	// Most of you will prefer to use NULL NODES once you see how to use them.
	final BinaryNode NULL_NODE = new BinaryNode();

	public BinarySearchTree() {
		this.root = this.NULL_NODE;
	}

	// For manual tests only
	void setRoot(BinaryNode n) {
		this.root = n;
	}

	/**
	 * 
	 * returns the size of the tree
	 *
	 * @return
	 */
	public int size() {
		return this.root.size();
	}

	
	public boolean containsNonBST(T item) {
		return this.root.containsNonBST(item);
	}

	public ArrayList<T> toArrayList() {
		ArrayList<T> list = new ArrayList<T>();
		root.fillArrayList(list);
		return list;
	}

	public Iterator<T> inefficientIterator() {
		return new InefficientIterator();
	}
	
	public Iterator<T> preOrderIterator() {
		return new PreOrderIterator(this.root);
	}
	/**
	 * 
	 * checks to see if the tree is empty
	 *
	 * @return
	 */
	public boolean isEmpty() {
		if(this.root == NULL_NODE) {
			return true;
		}
		return false;
	}

	/**
	 * 
	 * returns the height of the tree
	 *
	 * @return
	 */
	public int height() {
		if (this.root == this.NULL_NODE) {
			return -1;
		}
		return this.root.height();
	}
	
	/**
	 * returns a string of the elements in the tree
	 *
	 * @return
	 */
	@Override
	public String toString() {
		//this code works btw
		return this.toArrayList().toString();

	}
	
	public Object[] toArray() {
		return this.toArrayList().toArray();
	}
	
	@Override
	public Iterator<T> iterator() {
		// TODO Auto-generated method stub.
		return null;
	}

	//***************************************************************//
	// Not private, since we need access for manual testing.
	class BinaryNode {
		private T data;
		private BinaryNode left;
		private BinaryNode right;
		private int height;

		public BinaryNode() {
			this.data = null;
			this.left = null;
			this.right = null;
		}

		public int height() {
			//check if no children
			if(this.left == NULL_NODE && this.right == NULL_NODE) {
				return 0;
			//check only left child
			} else if(this.right == NULL_NODE && this.left != NULL_NODE) {
				return 1 + this.left.height();
			//check only right child
			}else if(this.left == NULL_NODE && this.right != NULL_NODE) {
				return 1 + this.right.height();
			}
			//return both children max
			return 1 + Math.max(this.left.height(), this.right.height());
		}

		public void fillArrayList(ArrayList<T> list) {
			if (this == NULL_NODE) {
				return;
			}
			this.left.fillArrayList(list);
			list.add(this.data);
			this.right.fillArrayList(list);

		}

		public boolean containsNonBST(T item) {
			if (this == NULL_NODE) {
				return false;
			}
			if (this.data.equals(item)) {
				return true;
			}
			return left.containsNonBST(item) || right.containsNonBST(item);
		}

		public BinaryNode(T element) {
			this.data = element;
			this.left = NULL_NODE;
			this.right = NULL_NODE;
		}

		public T getData() {
			return this.data;
		}

		public BinaryNode getLeft() {
			return this.left;
		}

		public BinaryNode getRight() {
			return this.right;
		}

		// For manual testing
		public void setLeft(BinaryNode left) {
			this.left = left;
		}

		/**
		 * 
		 * TODO Put here a description of what this method does.
		 *
		 * @param right
		 */
		public void setRight(BinaryNode right) {
			this.right = right;
		}

		public int size() {
			if (this == NULL_NODE) {
				return 0;
			}
			return 1 + this.left.size() + this.right.size();

		}
		
//		public void fillString(String string) {
//			if(this == NULL_NODE) {
//				return;
//			}
//			this.left.fillString(string);
//			string += "" + this.data; 
//			this.right.fillString(string);
//		}

	}
	//***************************************************************//
	// TODO: Implement your 3 iterator classes here, plus any other inner helper
	// classes you'd like.
	class NodeandVisited extends BinaryNode{
		BinaryNode next;
		boolean hasBeenVisited;

		public NodeandVisited(BinaryNode next, boolean visitied) {
			this.next = next;
			this.hasBeenVisited = visitied;
		}
	}

	class InefficientIterator implements Iterator {
		private ArrayList<T> list = toArrayList();
		private int index = -1;

		@Override
		public boolean hasNext() {
			return (index + 1 < list.size());
		}

		@Override
		public Object next() {
			// TODO Auto-generated method stub.
			if (!hasNext()) {
				throw new NoSuchElementException();
			}
			index++;
			return list.get(index);
		}

	}

	class MysteryIterator {
		private Queue<BinaryNode> queue;

		public MysteryIterator(BinaryNode root) {
			this.queue = new LinkedList<>();

			if (root != NULL_NODE) {
				throw new NoSuchElementException();
			}

		}
	}

	class PreOrderIterator implements Iterator {
		private Stack<Object> visited = new Stack<>();
		private Object index;
		
		public PreOrderIterator(BinaryNode root) {
			addPreOrderStack(root);			
		}
			
		@Override
		public boolean hasNext() {
			return !(this.visited.isEmpty());
		}

		@Override
		public Object next() {
			if(!hasNext()) {
				throw new NoSuchElementException();
			}
			this.index = this.visited.pop();
			return this.index;
			
		}
		
		private void addPreOrderStack(BinaryNode current) {
			if(current == NULL_NODE){
				return;
			}
			// adds the right to the stack
			if(current.getRight() != NULL_NODE) {
				addPreOrderStack(current.getRight());
			}
			// adds the left to the stack
			if(current.getLeft() != NULL_NODE){
				addPreOrderStack(current.getLeft());
			}
			//pushs on in opposite to preorder
			this.visited.push(current.getData());
			
		}
		
		
	}


}
