package bst;

import java.util.NoSuchElementException;

/**
 * @author You!
 * @param <T>
 */
public class BinarySearchTree<T extends Comparable<T>> {

	BinaryNode root;

	private final BinaryNode NULL_NODE = new BinaryNode(null);

	public BinarySearchTree() {
		root = NULL_NODE;
	}

	public BinarySearchTree(T[] ar) {
		this();
		if (ar.length == 0) {
			return;
		}
		
		// else ar is not empty
		int middle = ar.length / 2;
		if (ar.length >= 1) {
			this.root = new BinaryNode(ar[middle]);
		}
		BinaryNode currentNode = this.root;
		if(ar.length > 1) {
//			for(int i = 0; i < ar.length/2; i++ ) {
//				middle = middle/2;
//				currentNode.left = new BinaryNode(ar[middle/(2*i)]);
//				currentNode.right = new BinaryNode(ar[);
//				
//			}
//			for(int j = ar.length/2; j < ar.length; j++){
//				currentNode.right = 
//			}
				
			int height = 0;
			int temp = ar.length;
			while(true) {
				temp = temp/2;
				if(temp >= 2){
					height++;
				}else {
					break;
				}
			}
			this.root.buildTree(ar, middle, height+1);
		}
	
	}

	/**
	 * Feel free to call from tests to use to verify the shapes of your trees
	 * while debugging. Just remove the calls you are done so the output isn't
	 * cluttered.
	 * 
	 * @return A string showing a traversal of the nodes where children are
	 *         indented so that the structure of the tree can be determined.
	 * 
	 */
	public String toIndentString() {
		return root.toIndentString("");
	}

	// /////////////// BinaryNode
	public class BinaryNode {

		public T data;
		public BinaryNode left;
		public BinaryNode right;

		public BinaryNode(T element) {
			this.data = element;
			this.left = NULL_NODE;
			this.right = NULL_NODE;
		}

		public void buildTree(T[] ar, int lastMiddle, int height) {
			// special cases
			if(ar.length == 2) {
				this.left = new BinaryNode(ar[0]);
				this.right = NULL_NODE;
			}
			
			// base cases
			if(lastMiddle == 0 || lastMiddle == ar.length -1) {
				this.left = NULL_NODE;
				this.right = NULL_NODE;
				return;
			}
			if(height == 0){
				this.left = NULL_NODE;
				this.right = NULL_NODE;
			}
			
			// special cases
//			if(lastMiddle == 1){
//				this.left = new BinaryNode(ar[0]);
//				this.right = new BinaryNode(ar[2]);
//				return;
//			}
//			if(lastMiddle == ar.length - 2) {
//				this.left = new BinaryNode(ar[ar.length -3]);
//				this.right = new BinaryNode(ar[ar.length -1]);
//				return;
//			}
//			boolean isOdd = lastMiddle %2 ==1;
//			int log = lastMiddle / (ar.length/2);
			
			this.left = new BinaryNode(ar[lastMiddle - height]);
			this.right = new BinaryNode(ar[lastMiddle + height]);
			this.left.buildTree(ar, lastMiddle-height, height-1);
			this.right.buildTree(ar, lastMiddle+ height, height-1);
			
			
//			int arMiddle = ar.length / 2;
//			int middleDiff = arMiddle - lastMiddle;
//			if (lastMiddle == 0 || lastMiddle == ar.length - 1) {
//				this.left = NULL_NODE;
//				this.right = NULL_NODE;
//				return;
//			}
////			if (lastMiddle < lastLastMiddle) {
////				if (lastMiddle + lastMiddle / 2 >= lastLastMiddle) {
////					this.left = NULL_NODE;
////					this.right = NULL_NODE;
////					return;
////				}
////			} else if (lastMiddle > lastLastMiddle) {
////				if (lastMiddle / 2 <= lastLastMiddle) {
////					this.left = NULL_NODE;
////					this.right = NULL_NODE;
////					return;
////				}
////			}
//			// else
//			// if(lastMiddle/2 == 0) {
//			// this.left = new BinaryNode(ar[lastMiddle/2]);
//			// this.right = NULL_NODE;
//			// return;
//			// }
//			// if(lastMiddle/2 + lastMiddle == ar.length-1) {
//			// this.left = NULL_NODE;
//			// this.right = new BinaryNode(ar[ar.length -1]);
//			// return;
//			// }
//			if (!(lastMiddle > arMiddle && lastMiddle / 2 < lastLastMiddle)) {
//				this.left = new BinaryNode(ar[lastMiddle / 2]);
//				this.left.buildTree(ar, lastMiddle / 2, lastMiddle);
//			}else{
//				this.left = NULL_NODE;
//			}
//			if (lastMiddle % 2 == 1) {
//				if (!(lastMiddle < arMiddle && (lastMiddle + lastMiddle / 2 + 1 )>= lastLastMiddle)) {
//					this.right = new BinaryNode(ar[lastMiddle + lastMiddle / 2 + 1]);
//					this.right.buildTree(ar, lastMiddle + lastMiddle / 2 + 1, lastMiddle);
//				}else {
//					this.right = NULL_NODE;
//				}
//
//			} else {
//				if (!(lastMiddle < arMiddle && (lastMiddle + lastMiddle / 2) >= lastLastMiddle)) {
//					this.right = new BinaryNode(ar[lastMiddle + lastMiddle / 2]);
//					this.right.buildTree(ar, lastMiddle + lastMiddle / 2, lastMiddle);
//				}else {
//					this.right = NULL_NODE;
//				}
//
//			}

	}

	// The next methods are used by the unit tests
	public BinaryNode insert(T e) {
		if (this == NULL_NODE) {
			return new BinaryNode(e);
		} else if (e.compareTo(data) < 0) {
			left = left.insert(e);
		} else if (e.compareTo(data) > 0) {
			right = right.insert(e);
		} else {
			// do nothing
		}
		return this;
	}

	@Override
	public String toString() {
		if (this == NULL_NODE) {
			return "";
		}
		return left.toString() + this.data.toString() + right.toString();
	}

	public String toIndentString(String indent) {
		if (this == NULL_NODE) {
			return indent + "NULL\n";
		}

		String myInfo = indent + String.format("%c\n", this.data);

		return myInfo + this.left.toIndentString(indent + "  ") + this.right.toIndentString(indent + "  ");
	}

	}

	// The next methods are used by the unit tests
	public void insert(T e) {
		root = root.insert(e);
	}

	/**
	 * Remove from the tree..
	 * 
	 * @param x
	 *            the item to remove.
	 * @throws ItemNotFoundException
	 *             if x is not found.
	 */
	public void remove(T x) {
		this.root = this.remove(x, this.root);
	}

	protected BinaryNode remove(T x, BinaryNode t) {
		if (t == NULL_NODE)
			throw new NoSuchElementException(t.toString());
		if (x.compareTo(t.data) < 0)
			t.left = remove(x, t.left);
		else if (x.compareTo(t.data) > 0)
			t.right = remove(x, t.right);
		else if (t.left != NULL_NODE && t.right != NULL_NODE) {// Two children
			t.data = findMinHelper(t.right);
			t.right = removeMin(t.right);
		} else
			t = (t.left != NULL_NODE) ? t.left : t.right;
		return t;
	}

	/**
	 * Finds the smallest item in a tree.
	 * 
	 * @return the smallest item, null if the tree is empty.
	 */
	public T findMin() {
		return findMinHelper(root);
	}

	public T findMinHelper(BinaryNode current) {
		if (root == NULL_NODE) {
			return null;
		}
		while (current.left != NULL_NODE) {
			current = current.left;
		}
		return current.data;
	}

	/**
	 * Finds the largest item in a tree.
	 * 
	 * @return the largest item, null if the tree is empty.
	 */
	public T findMax() {
		return findMaxHelper(root);
	}

	public T findMaxHelper(BinaryNode current) {
		if (root == NULL_NODE) {
			return null;
		}
		while (current.right != NULL_NODE) {
			current = current.right;
		}
		return current.data;
	}

	private void removeMin() {
		this.root = this.removeMin(this.root);
	}

	/**
	 * Internal method to remove minimum item from a subtree.
	 * 
	 * @param t
	 *            the node that roots the tree.
	 * @return the new root.
	 * @throws ItemNotFoundException
	 *             if t is empty.
	 */
	protected BinaryNode removeMin(BinaryNode t) {
		if (t == NULL_NODE)
			throw new NoSuchElementException();
		else if (t.left != NULL_NODE) {
			t.left = removeMin(t.left);
			return t;
		} else
			return t.right;
	}

	public int size() {
		return sizeHelper(root);
	}

	private int sizeHelper(BinaryNode node) {
		if (node == NULL_NODE) {
			return 0;
		}
		return 1 + sizeHelper(node.left) + sizeHelper(node.right);
	}

	public int height() {
		return heightHelper(root);
	}

	private int heightHelper(BinaryNode node) {
		if (node == NULL_NODE) {
			return -1;
		}
		return 1 + Math.max(heightHelper(node.left), heightHelper(node.right));
	}

	@Override
	public String toString() {
		return root.toString();
	}
}