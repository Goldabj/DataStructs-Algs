import java.util.Iterator;
import java.util.LinkedList;

public class Chain implements Iterable<String>{
	private LinkedList<String> chain; 
	private String myString;
	
	/**
	 * creates a linked List chain for words [initializes it]
	 *
	 */
	public Chain() {
		this.chain = new LinkedList<String>();
	}
	
	protected abstract class Node{ //I think we need a node to use linked list
		String data;
		Node next;
		Node prev;
	}
	
	/**
	 * creates a new chain that has the added words
	 */
	public Chain(String s){
		
		
	}
	
	/**
	 * returns the last word of the chain
	 *
	 * @return
	 */
	public String getLast() {
		return this.chain.getLast();
	}
	
	/**
	 * returns the length of the chain
	 *
	 * @return
	 */
	public int length() {
		return this.chain.size();
	}
	
	
	
	/**
	 * adds an element to the end of this chain, then returns the new chain
	 *
	 */
	public Chain addLast(String s) {
		myString += s;
		
		return new Chain(myString);
		
	}
	
	/**
	 * returns true if this chian contains the word, else returns
	 * false
	 *
	 * @param word
	 * @return
	 */
	public boolean contains(String word) {
		return this.chain.contains(word);
	}
	
	/**
	 * returns an iterator for the chain
	 * 
	 * @return
	 */
	public Iterator<String> iterator() {
		return this.chain.iterator();
	}
	
}
